name: Deploy to Amazon ECS

on:
  push:
    branches: [ "master" ]

env:
  AWS_REGION: ap-south-1
  AWS_ACCESS_KEY_ID: AKIA2RVWE6TFIMJ4F2G3
  AWS_SECRET_ACCESS_KEY: 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
  ECR_REPOSITORY: testing

jobs:
  compile:
  
    name: deploy on eks
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         IMAGE_TAG: testing_v${{ github.run_number }}
      run: |
         # Build a docker container and
         # push it to ECR so that it can
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Set image tag
      run: echo "IMAGE_NAME=${{ steps.login-ecr.outputs.registry }}/my-repo:testing_v${{ github.run_number }}" >> $GITHUB_ENV

    - name: Deploy with updated image
      run: |
            envsubst < Kubernetes/deployment.yaml > Kubernetes/deployment-rendered.yaml
            cat Kubernetes/deployment-rendered.yaml  # Optional: Debug output
            kubectl apply -f Kubernetes/deployment-rendered.yaml

  
    # - name: Deploy Amazon ECS task definition
    #   uses: aws-actions/amazon-ecs-deploy-task-definition@v1
    #   with:
    #     task-definition: ${{ steps.task-def.outputs.task-definition }}
    #     service: ${{ env.ECS_SERVICE }}
    #     cluster: ${{ env.ECS_CLUSTER }}
    #     wait-for-service-stability: true
